classdef Lut2Vhdl
%LUT2VHDL uses look-up tables (e.g. objects of smoothLUT) to generate
%  optimized VHDL-Code (algorithm from [1]).
%
%   Syntax:
%       myVHDL = LUT2VHDL(mySmoothLUT)
%       myVHDL = LUT2VHDL(knotFile)
%       myVHDL = LUT2VHDL(x_start,x_stepsize,x_end,y_start,y_stepsize,y_end,c)
%
%   Description:
%       myVHDL = LUT2VHDL(mySmoothLUT) generates VHDL-Code based on 
%       smoothLUT object.
%
%       myVHDL = LUT2VHDL(knotFile) generates VHDL-Code based on a knot 
%       file generated by the method write2file from class smoothLUT.
%
%       myVHDL = LUT2VHDL(x_start,x_stepsize,x_end,y_start,y_stepsize,y_end,c)
%       generates VHDL-Code based on a set of knot parameters. 
%   
%
%       myVHDL.usedMultipliers(number) sets the total amount of multipliers 
%       to be used. Only valid for non piplelined version.
%   
%       myVHDL.useClock = 0/1 enables the usage of clockcycles.
%
%       myVHDL.writeVhdl(obj,fileName,options) writes VHDL-code to file.
%
%       myVHDL.writeVhdlPipelined(obj,fileName,options) writes pipelined
%       VHDL-code to file.
%
%   Examples:
%       % create object of smoothLUT
%       [~,~,zk] = peaks(21);
%       myLUT = smoothLUT([0:1:20]',[0:1:20],zk);
%       
%       % create object of Lut2Vhdl
%       myVhdl = Lut2Vhdl(myLUT)
%
%       % write VHDL Code (not pipelined) in file myVhdlCode.vhd
%       myVhdl.writeVhdlPipelined('myVhdlCode');
%
%       % write pipelined VHDL Code in file myVhdlCodePipelined.vhd
%       myVhdl.writeVhdlPipelined('myVhdlCodePipelined');
%
%
% [1] R. Mitze, D. Dillkötter, S. Gros, A. Schild and M. Mönnigmann. Fast and
%  smooth surface B-spline interpolation for regularly spaced data used in
%  system modeling to make MPC real-time feasible. Proceedings of the
%  European Control Conference 2018 (ECC18), Limassol: 667-672, 2018
%
%
% See also smoothLUT

%   AUTHORS
%   2018    David Dillkötter and Martin Mönnigmann:
%           Ruhr-Universität Bochum
%           Systems Theory and Automatic Control
%   mailto: david.dillkoetter@rub.de 
%   mailto: martin.moennigmann@rub.de

%   LICENSE
%    
%    This program is free software; you can redistribute it and/or modify
%  it under the terms of the GNU Lesser General Public License as published
%  by the Free Software Foundation; either version 3 of the License, or (at
%  your option) any later version.
%    This program is distributed in the hope that it will be useful, but
%  WITHOUT ANY WARRANTY; without even the implied warranty of
%  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser
%  General Public License for more details.
%    You should have received a copy of the GNU Lesser General Public
%  License along with this library; if not, write to the  Free Software
%  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
%  MA 02110-1335 USA

    properties 
        xStart;                     % knot vector in x-direction is [xStart:xStepsize:xEnd]'
        xStepsize ;                 % knot vector in x-direction is [xStart:xStepsize:xEnd]'
        xEnd;                       % knot vector in x-direction is [xStart:xStepsize:xEnd]'
        yStart;                     % knot vector in y-direction is [yStart:yStepsize:yEnd]
        yStepsize;                  % knot vector in y-direction is [yStart:yStepsize:yEnd]
        yEnd;                       % knot vector in y-direction is [yStart:yStepsize:yEnd]
        knots;                      % matrix with knot values
        fixedLengthResult   = 18;   % total bitsize of the result,        default = 18
        fixedFractionResult = 10;   % fractional bitsize of the result,   default = 10
        fixedLengthX        = 18;   % total bitsize of the x values,      default = 18
        fixedFractionX      = 10;   % fractional bitsize of the x values, default = 10
        fixedLengthY        = 18;   % total bitsize of the x values,      default = 18
        fixedFractionY      = 10;   % fractional bitsize of the x values, default = 10
        usedMultipliers     = 38;   % limit multipliers,                  default = 38
        
    end
    
    properties (SetAccess = private,GetAccess = private)
        xTotalSteps;
        yTotalSteps;
        fixedLengthXNorm    = 18;
        fixedFractionXNorm  = 10;
        fixedLengthYNorm    = 18;
        fixedFractionYNorm  = 10;
        currentMultiplier   = 1;
        currentStep         = 1;
        useClock            = 0;
        
    end
    
    methods
        function obj = set.usedMultipliers(obj,newusedMultipliers)
            if isempty(newusedMultipliers)
            elseif isnumeric(newusedMultipliers) && isreal(newusedMultipliers) && newusedMultipliers>=0
                obj.usedMultipliers = newusedMultipliers;
                obj.useClock        = 1;

            else
                error('Formated incorrectly');
            end
        end
        
        function obj = set.fixedLengthResult(obj,newFixedLength)
            if isempty(newFixedLength)
            elseif isnumeric(newFixedLength) && isreal(newFixedLength) && newFixedLength>=0 && newFixedLength<=18 && newFixedLength >= obj.fixedFractionResult
                obj.fixedLengthResult=newFixedLength;
            else
                error('Fixed Length is not allowed to exceed 18 right now and must be greater or equal the fractional part.');
            end
        end
        
        function obj = set.fixedFractionResult(obj,newfixedFraction)
            if isempty(newfixedFraction)
            elseif isnumeric(newfixedFraction) && isreal(newfixedFraction) && newfixedFraction>=0 && newfixedFraction<=obj.fixedLengthResult
                obj.fixedFractionResult=newfixedFraction;
            else
                error('Fractional part is not allowed to exceed 18 right now and can´t exceed the total fixed Length.');
            end
        end
        
        function obj = set.fixedLengthX(obj,newFixedLength)
            if isempty(newFixedLength)
            elseif isnumeric(newFixedLength) && isreal(newFixedLength) && newFixedLength>=0 && newFixedLength<=18 && newFixedLength >= obj.fixedFractionX
                obj.fixedLengthX=newFixedLength;
            else
                error('Fixed Length is not allowed to exceed 18 right now and must me greater or equal the fractional part.');
            end
        end
        
        function obj = set.fixedFractionX(obj,newfixedFraction)
            if isempty(newfixedFraction)
            elseif isnumeric(newfixedFraction) && isreal(newfixedFraction) && newfixedFraction>=0 && newfixedFraction<=obj.fixedLengthX
                obj.fixedFractionX=newfixedFraction;
            else
                error('Fractional part is not allowed to exceed 18 right now and can´t exceed the total fixed Length.');
            end
        end
        
        function obj = set.fixedLengthY(obj,newFixedLength)
            if isempty(newFixedLength)
            elseif isnumeric(newFixedLength) && isreal(newFixedLength) && newFixedLength>=0 && newFixedLength<=18 && newFixedLength >= obj.fixedFractionY
                obj.fixedLengthY=newFixedLength;
            else
                error('Fixed Length is not allowed to exceed 18 right now and must me greater or equal the fractional part.');
            end
        end
        
        function obj = set.fixedFractionY(obj,newfixedFraction)
            if isempty(newfixedFraction)
            elseif isnumeric(newfixedFraction) && isreal(newfixedFraction) && newfixedFraction>=0 && newfixedFraction<=obj.fixedLengthY
                obj.fixedFractionY=newfixedFraction;
            else
                error('Fractional part is not allowed to exceed 18 right now and can´t exceed the total fixed Length.');
            end
        end  
        
        
        function obj = Lut2Vhdl(fileOrXStart, x_stepsize, x_end, y_start, y_stepsize, y_end, c)
            if nargin==1
                if ischar(fileOrXStart)
                    file = load(fileOrXStart);
                
                    allFieldsExist = hasAllFields(obj, file, ["x_start", "x_stepsize", "x_end", "y_start", "y_stepsize", "y_end", "c"]);
                    if(allFieldsExist == 0)
                       error("File doesn't contain needed data") 
                       return;
                    end
                    if (size(file.c) ~= [(file.x_end - file.x_start)/file.x_stepsize+1 (file.y_end - file.y_start)/file.y_stepsize+1])
                        error("Data inconsistency in file. Worng size?");
                        return;
                    end
                    obj.xStart    = file.x_start;
                    obj.xStepsize = file.x_stepsize;
                    obj.xEnd      = file.x_end;
                    obj.yStart    = file.y_start;
                    obj.yStepsize = file.y_stepsize;
                    obj.yEnd      = file.y_end;
                    obj.knots     = file.c;
                else
                    d             = fileOrXStart;
                    obj.xStart    = d.xk(1);
                    obj.xStepsize = d.xk(2)-d.xk(1);
                    obj.xEnd      = d.xk(end);
                    obj.yStart    = d.yk(1);
                    obj.yStepsize = d.yk(2)-d.yk(1);
                    obj.yEnd      = d.yk(end);
                    obj.knots     = d.c;
                end
                obj.xTotalSteps = (obj.xEnd - obj.xStart)/obj.xStepsize+1;
                obj.yTotalSteps = (obj.yEnd - obj.yStart)/obj.yStepsize+1;
                
            elseif nargin == 7
                if (size(c) ~= [(x_end - fileOrXStart)/x_stepsize+1 (y_end - y_start)/y_stepsize+1])
                    error("Data inconsistency");
                    return;
                end
            else
                error('One or seven input arguments needed')
            end
            
        end
        
        
        function writeVhdl(obj, fileName)
            % WRITEVHDL writes VHDL-code to file
            %
            % Syntax:
            %   myVHDL.writeVhdl('fileName')
            
            file = fopen(strcat(fileName,'.vhd'),'wt');
            if obj.useClock ~= 0
                obj.usedMultipliers = 38;
            end
           % fprintf(file,' -- Watch out! Due to a huge resource consumption of devisions in VHDL the result has to be scaled !!!\n');
            fprintf(file,'library IEEE;\n');
            fprintf(file,'use IEEE.STD_LOGIC_1164.ALL;\n');
            fprintf(file,'use IEEE.NUMERIC_STD.all;\n');
            fprintf(file,'\n\n');
            fprintf(file,'entity Spline3D is\n');
            fprintf(file,'\tPort ( searchPositionX : in  signed(%u downto 0);\n', obj.fixedLengthX-1);
            fprintf(file,'\t searchPositionY : in  signed(%u downto 0);\n', obj.fixedLengthY-1);

            fprintf(file,'\t calc: in std_logic;\n');
            fprintf(file,'\t clk: in std_logic;\n');
            fprintf(file,'\t clkOut: out std_logic;\n');
            fprintf(file,'\t result : out  signed(%u downto 0));\n', obj.fixedLengthResult-1);
            fprintf(file,'end Spline3D;\n');
            fprintf(file,'\n\n');

            fprintf(file,'architecture Behavioral of Spline3D is\n');
            fprintf(file,'\n');
            
            fprintf(file,'type knots_row_type is array (0 to %u) of signed(%u downto 0);\n', obj.xTotalSteps-1, obj.fixedLengthResult-1);
            fprintf(file,'type knots_mat_type is array (0 to %u) of knots_row_type;\n', obj.yTotalSteps-1);
            fprintf(file,'constant knots_mat: knots_mat_type := (\n');

            for j=1:obj.xTotalSteps
                fprintf(file,'("%s"', bin(fi(obj.knots(j, 1)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) ); 
                for i=2:obj.yTotalSteps
                    fprintf(file,',"%s"', bin(fi(obj.knots(j, i)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) );
                end
                if j==obj.xTotalSteps
                    fprintf(file,')\n');
                else
                    fprintf(file,'),\n');
                end
            end
            fprintf(file,');\n\n -- Knot Values are scaled to avoid division\n');
            fprintf(file,'constant knots_mat: knots_mat_type := (\n');
            for j=1:obj.xTotalSteps
                fprintf(file,'("%s"', bin(fi(obj.knots(j, 1)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) ); 
                for i=2:obj.yTotalSteps
                    fprintf(file,',"%s"', bin(fi(obj.knots(j, i)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) );
                end
                if j==obj.xTotalSteps
                    fprintf(file,')\n');
                else
                    fprintf(file,'),\n');
                end
            end
            fprintf(file,');\n\n -- Knot Values are scaled to avoid division\n');
            
            fprintf(file,'signal calcStep: integer range 0 to %d := 0;\n', ceil(40/obj.usedMultipliers));
            fprintf(file,'signal xStrich: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal yStrich: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal xStrichSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal yStrichSquare: signed%s;\n',obj.printSinglePrecision());

            fprintf(file,'signal diff2_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff1_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal sum1_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff2_xSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff1_xSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal sum1_xSquare: signed%s;\n',obj.printSinglePrecision());

            fprintf(file,'signal diff2_y: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff1_y: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal sum1_y: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff2_ySquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal diff1_ySquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'signal sum1_ySquare: signed%s;\n',obj.printSinglePrecision());

            fprintf(file,'signal searchPositionNormX: signed%s := "%s";\n',printDoublePrecision(obj),bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            fprintf(file,'signal searchPositionNormY: signed%s := "%s";\n',printDoublePrecision(obj),bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));

            fprintf(file,'signal scaleX: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/obj.xStepsize, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleResultX: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/6, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleY: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/obj.yStepsize, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleResultY: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/6, 1, obj.fixedLengthResult, obj.fixedFractionResult)));

            fprintf(file,'\n');
            fprintf(file,'signal positionX: integer range 0 to %u := 1;\n', obj.xTotalSteps-1);
            fprintf(file,'signal positionY: integer range 0 to %u := 1;\n', obj.yTotalSteps-1);
            fprintf(file,'\n');
            fprintf(file,'signal resultTemp: signed(%u downto 0):="%s";\n',35, bin(fi(1, 1, 36, 20)));

            fprintf(file,'\n');
            fprintf(file,'constant xStep: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'constant eins: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'constant zwei: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(2, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'\n');
            fprintf(file,'\n');

            for j=0:3
                fprintf(file,'signal Bx%u: signed(%u downto 0):= ("%s"); \n', j,obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            end
            for j=0:3
                fprintf(file,'signal By%u: signed(%u downto 0):= ("%s"); \n', j,obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            end

            fprintf(file,'\n');
            for j=1:16
                fprintf(file,'signal knotsXWeightResult_%u: signed(%u downto 0) := ("%s"); \n', j, obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult))); 
            end
            for j=1:4
                fprintf(file,'signal knotsFullWeightResult_%u: signed(%u downto 0) := ("%s"); \n', j, obj.fixedLengthResult*2-1,bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult))); 
            end
            
            fprintf(file,'\n');

            for j=1:obj.usedMultipliers
                fprintf(file,'signal mul_%u_a: signed(%u downto 0) := ("%s"); \n', j, obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
                fprintf(file,'signal mul_%u_b: signed(%u downto 0):= ("%s"); \n', j, obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
                fprintf(file,'signal mul_%u_res: signed(%u downto 0):= ("%s"); \n', j, obj.fixedLengthResult*2-1,bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            end
            fprintf(file,'begin\n');

            for j=1:obj.usedMultipliers
                fprintf(file,'mul_%u_res <= mul_%u_a*mul_%u_b; \n', j,j,j);
            end

            fprintf(file,'\n');
            if obj.useClock
                fprintf(file,'process (clk, positionX, positionY, searchPositionNormX, xStrich, diff2_x, mul_1_a, mul_1_b, mul_1_res ,mul_2_a, mul_2_b, mul_2_res ,mul_3_a, mul_3_b, mul_3_res ,mul_4_a, mul_4_b, mul_4_res ,mul_5_a, mul_5_b, mul_5_res ,mul_6_a, mul_6_b, mul_6_res ,mul_7_a, mul_7_b, mul_7_res ,mul_8_a, mul_8_b, mul_8_res ,mul_9_a, mul_9_b, mul_9_res ,mul_10_a, mul_10_b, mul_10_res ,mul_11_a, mul_11_b, mul_11_res ,mul_12_a, mul_12_b, mul_12_res ,mul_13_a, mul_13_b, mul_13_res ,mul_14_a, mul_14_b, mul_14_res ,mul_15_a, mul_15_b, mul_15_res ,mul_16_a, mul_16_b, mul_16_res ,mul_17_a, mul_17_b, mul_17_res ,mul_18_a, mul_18_b, mul_18_res ,mul_19_a, mul_19_b, mul_19_res ,mul_20_a, mul_20_b, mul_20_res, resultTemp)\n');

                fprintf(file,'begin\n');
                fprintf(file,'\tif rising_edge(clk) then\n');
                fprintf(file,'\t\tif calcStep = 0 then\n');
                fprintf(file,'\t\t\tcalcStep <= 1;\n');
            end
            fprintf(file,'\n');
            MultiplierArray = { [sprintf(['\t\t\t mul_MULTIPLIER_a <= searchPositionX;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= scaleX;\n',...
                                '\t\t\t searchPositionNormX <= mul_MULTIPLIER_res+"%s";\n',...
                                '\t\t\t positionX <= to_integer(searchPositionNormX(%u downto %u));\n',...
                                '\t\t\t xStrich <= signed(resize(''0'' & searchPositionNormX(%u downto %u),%u));\n',...
                                '\t\t\t diff2_x <=  zwei -  xStrich ;\n',...
                                '\t\t\t diff1_x <=  eins -  xStrich ;\n',...
                                '\t\t\t sum1_x <=  eins +  xStrich ;\n'],bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)),obj.fixedLengthResult*2-1,obj.fixedFractionResult*2,obj.fixedLengthResult+1, obj.fixedFractionResult, obj.fixedLengthResult)]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= searchPositionY;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= scaleY;\n',...
                                '\t\t\t searchPositionNormY <= mul_MULTIPLIER_res+"%s";\n',...
                                '\t\t\t positionY <= to_integer(searchPositionNormY(%u downto %u));\n',...
                                '\t\t\t yStrich <= signed(resize(''0'' & searchPositionNormY(%u downto %u),%u));\n',...
                                '\t\t\t diff2_y <=  zwei -  yStrich ;\n',...
                                '\t\t\t diff1_y <=  eins -  yStrich ;\n',...
                                '\t\t\t sum1_y <=  eins +  yStrich ;\n'],bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)),obj.fixedLengthResult*2-1,obj.fixedFractionResult*2,obj.fixedLengthResult+1, obj.fixedFractionResult, obj.fixedLengthResult)]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff1_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff1_x;\n',...
                                '\t\t\t diff1_xSquare <= mul_MULTIPLIER_res%s;\n'] ,obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff2_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff2_x;\n',...
                                '\t\t\t diff2_xSquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= xStrich;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= xStrich;\n',...
                                '\t\t\t xStrichSquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= sum1_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= sum1_x;\n',...
                                '\t\t\t sum1_xSquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff1_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff1_xSquare;\n',...
                                '\t\t\t Bx0 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff2_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff2_xSquare;\n',...
                                '\t\t\t Bx1 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= xStrich;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= xStrichSquare;\n',...
                                '\t\t\t Bx3 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= sum1_x;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= sum1_xSquare;\n',...
                                '\t\t\t Bx2 <= mul_MULTIPLIER_res%s - SHIFT_LEFT(Bx3, 2);\n'],obj.printCenterPrecision())]
                                
                                ,
                                
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff1_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff1_y;\n',...
                                '\t\t\t diff1_ySquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff2_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff2_y;\n',...
                                '\t\t\t diff2_ySquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= yStrich;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= yStrich;\n',...
                                '\t\t\t yStrichSquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= sum1_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= sum1_y;\n',...
                                '\t\t\t sum1_ySquare <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff1_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff1_ySquare;\n',...
                                '\t\t\t By0 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= diff2_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= diff2_ySquare;\n',...
                                '\t\t\t By1 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= yStrich;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= yStrichSquare;\n',...
                                '\t\t\t By3 <= mul_MULTIPLIER_res%s;\n'],obj.printCenterPrecision())]
                                ,
                                [sprintf(['\t\t\t mul_MULTIPLIER_a <= sum1_y;\n',...
                                '\t\t\t mul_MULTIPLIER_b <= sum1_ySquare;\n',...
                                '\t\t\t By2 <= mul_MULTIPLIER_res%s - SHIFT_LEFT(By3, 2);\n'],obj.printCenterPrecision())]
            };
            
            
            for i=1:length(MultiplierArray)
               fprintf(file, strrep(strjoin(MultiplierArray(i)), 'MULTIPLIER', num2str(obj.currentMultiplier,'%d\n') ) );
               obj = nextMultiplier(obj, file);
            end
            
            
            for (i=0:3)
                for j=1:4
                    fprintf(file,'\t\t\t mul_%d_a <= Bx%d;\n', obj.currentMultiplier, i); 
                    fprintf(file,'\t\t\t mul_%d_b <= knots_mat(positionX%+d)(positionY%+d);\n',obj.currentMultiplier, i-1, j-2);
                    fprintf(file,'\t\t\t knotsXWeightResult_%d <= mul_%d_res%s ;\n', i*4+j, obj.currentMultiplier, obj.printCenterPrecision() ); 
                    obj = nextMultiplier(obj, file);
                end
            end
            fprintf(file,'\n');
            
            for (i=0:3)
                fprintf(file,'\t\t\t mul_%d_a <= By%d;\n', obj.currentMultiplier , i);
                fprintf(file,'\t\t\t mul_%d_b <= knotsXWeightResult_%d + knotsXWeightResult_%d + knotsXWeightResult_%d + knotsXWeightResult_%d;\n', obj.currentMultiplier, i+1, i+5,i+9,i+13);
                fprintf(file,'\t\t\t knotsFullWeightResult_%d <= mul_%d_res;\n', i+1 , obj.currentMultiplier);
                obj = nextMultiplier(obj, file);
            end

            fprintf(file,'\t\t\t resultTemp <= knotsFullWeightResult_1 + knotsFullWeightResult_2 + knotsFullWeightResult_3 + knotsFullWeightResult_4;\n');
            fprintf(file,'\t\t\t result <= resultTemp%s;\n',obj.printCenterPrecision());
            if obj.useClock
                fprintf(file,'\n');
                fprintf(file,'\t\telse\n');
                fprintf(file,'\t\t\tcalcStep <= 0;\n');
                fprintf(file,'\t\tend if;\n');
                fprintf(file,'\tend if;\n');
                fprintf(file,'end process;\n');
            end
            fprintf(file,'\n');
            fprintf(file,'\n');
            %VHDL Ende
            fprintf(file,'end Behavioral;\n\n');
	
            fclose(file);
        end
        
        function writeVhdlPipelined(obj, fileName)
            % WRITEVHDLPIPELINED writes pipelined VHDL-code to file. Note
            % that the limit set for the multipliers is ignored here
            %
            % Syntax:
            %   myVHDL.writeVhdl('fileName')
            file = fopen(strcat(fileName,'.vhd'),'wt');
           % fprintf(file,' -- Watch out! Due to a huge resource consumption of devisions in VHDL the result has to be devided by !!!\n');
            fprintf(file,'library IEEE;\n');
            fprintf(file,'use IEEE.STD_LOGIC_1164.ALL;\n');
            fprintf(file,'use IEEE.NUMERIC_STD.all;\n');
            fprintf(file,'\n\n');
            fprintf(file,'entity Spline3D is\n');
            fprintf(file,'\tPort ( searchPositionX : in  signed(%u downto 0);\n', obj.fixedLengthX-1);
            fprintf(file,'\t searchPositionY : in  signed(%u downto 0);\n', obj.fixedLengthY-1);

            fprintf(file,'\t calc: in std_logic;\n');
            fprintf(file,'\t clk: in std_logic;\n');
            fprintf(file,'\t clkOut: out std_logic;\n');
            fprintf(file,'\t result : out  signed(%u downto 0));\n', obj.fixedLengthResult-1);
            fprintf(file,'end Spline3D;\n');
            fprintf(file,'\n\n');

            fprintf(file,'architecture Behavioral of Spline3D is\n');
            fprintf(file,'\n');
            
            fprintf(file,'type knots_row_type is array (0 to %u) of signed(%u downto 0);\n', obj.xTotalSteps-1, obj.fixedLengthResult-1);
            fprintf(file,'type knots_mat_type is array (0 to %u) of knots_row_type;\n', obj.yTotalSteps-1);
            
            
            fprintf(file,'signal scaleX: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleResultX: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/6, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleY: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'signal scaleResultY: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1/6, 1, obj.fixedLengthResult, obj.fixedFractionResult)));

            fprintf(file,'\n');
            fprintf(file,'signal positionX: integer range 0 to %u := 1;\n', obj.xTotalSteps-1);
            fprintf(file,'signal positionY: integer range 0 to %u := 1;\n', obj.yTotalSteps-1);
            fprintf(file,'\n');
            fprintf(file,'signal resultTemp: signed(%u downto 0):="%s";\n',35, bin(fi(1, 1, 36, 20)));

            fprintf(file,'\n');
            fprintf(file,'constant xStep: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'constant eins: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'constant zwei: signed(%u downto 0):="%s";\n', obj.fixedLengthResult-1, bin(fi(2, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            fprintf(file,'\n');
            fprintf(file,'\n');
            fprintf(file,'constant knots_mat: knots_mat_type := (\n');
            for j=1:obj.xTotalSteps
                fprintf(file,'("%s"', bin(fi(obj.knots(j, 1)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) ); 
                for i=2:obj.yTotalSteps
                    fprintf(file,',"%s"', bin(fi(obj.knots(j, i)/36, 1, obj.fixedLengthResult, obj.fixedFractionResult)) );
                end
                if j==obj.xTotalSteps
                    fprintf(file,')\n');
                else
                    fprintf(file,'),\n');
                end
            end
            fprintf(file,');\n\n -- Knot Values are scaled to avoid division\n');
            fprintf(file,'\n');

            for j=1:38
                fprintf(file,'signal mul_%u_a: signed(%u downto 0) := ("%s"); \n', j, obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
                fprintf(file,'signal mul_%u_b: signed(%u downto 0):= ("%s"); \n', j, obj.fixedLengthResult-1,bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
                fprintf(file,'signal mul_%u_res: signed(%u downto 0):= ("%s"); \n', j, obj.fixedLengthResult*2-1,bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            end
            fprintf(file,'\n\nbegin\n');
            
            for j=1:38
                fprintf(file,'mul_%u_res <= mul_%u_a*mul_%u_b; \n', j,j,j);
            end
            fprintf(file,'result <= mul_35_res%s + mul_36_res%s+ mul_37_res%s+ mul_38_res%s;\n',obj.printCenterPrecision(),obj.printCenterPrecision(),obj.printCenterPrecision(),obj.printCenterPrecision());
            
            fprintf(file,'process (all)\n');
            fprintf(file,'variable xStrich: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable yStrich: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable sum1_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff1_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff2_x: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable sum1_y: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff1_y: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff2_y: signed%s;\n',obj.printSinglePrecision());
            
            fprintf(file,'variable xStrichSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable yStrichSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff2_ySquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff1_ySquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable sum1_ySquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff2_xSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable diff1_xSquare: signed%s;\n',obj.printSinglePrecision());
            fprintf(file,'variable sum1_xSquare: signed%s;\n',obj.printSinglePrecision());
            
            fprintf(file,'variable searchPositionNormX: signed%s := "%s";\n',printDoublePrecision(obj),bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            fprintf(file,'variable searchPositionNormY: signed%s := "%s";\n',printDoublePrecision(obj),bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            
            for j=0:3
                fprintf(file,'variable Bx%u: signed%s:= ("%s");  \n', j,obj.printSinglePrecision(),bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
                fprintf(file,'variable By%u: signed%s:= ("%s");  \n', j,obj.printSinglePrecision(),bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            end
            for j=1:16
                fprintf(file,'variable knotsXWeightResult_%u: signed%s := ("%s");   \n', j,obj.printSinglePrecision(),bin(fi(1, 1, obj.fixedLengthResult, obj.fixedFractionResult)));
            end
            for j=1:4
                fprintf(file,'variable knotsFullWeightResult_%u: signed%s := ("%s");   \n', j,obj.printDoublePrecision(),bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            end
            
            %Process
            fprintf(file,'begin\n');
            fprintf(file,'\tif rising_edge(clk) then\n');
            
            fprintf(file,'\n\t\t-- Step 1\n');
            
            fprintf(file,'\t\tmul_1_a <= searchPositionX;\n');
            fprintf(file,'\t\tmul_1_b <= scaleX;\n');
            fprintf(file,'\t\tsearchPositionNormX := mul_1_res+"%s";\n',bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            fprintf(file,'\t\tpositionX <= to_integer(searchPositionNormX(%u downto %u));\n',obj.fixedLengthResult*2-1,obj.fixedFractionResult*2);
            fprintf(file,'\t\txStrich := signed(resize(''0'' & searchPositionNormX(%u downto %u),%u));\n',obj.fixedLengthResult+1,obj.fixedFractionResult,obj.fixedLengthResult);
            fprintf(file,'\t\tdiff2_x :=  zwei -  xStrich ;\n');
            fprintf(file,'\t\tdiff1_x :=  eins -  xStrich ;\n');
            fprintf(file,'\t\tsum1_x :=  eins +  xStrich ;\n');
            fprintf(file,'\t\tmul_2_a <= searchPositionY;\n');
            fprintf(file,'\t\tmul_2_b <= scaleY;\n');
            fprintf(file,'\t\tsearchPositionNormY := mul_2_res+"%s";\n',bin(fi(1, 1, 2*obj.fixedLengthResult, 2*obj.fixedFractionResult)));
            fprintf(file,'\t\tpositionY <= to_integer(searchPositionNormY(%u downto %u));\n',obj.fixedLengthResult*2-1,obj.fixedFractionResult*2);
            fprintf(file,'\t\tyStrich := signed(resize(''0'' & searchPositionNormY(%u downto %u),%u));\n',obj.fixedLengthResult+1,obj.fixedFractionResult,obj.fixedLengthResult);
            fprintf(file,'\t\tdiff2_y :=  zwei -  yStrich ;\n');
            fprintf(file,'\t\tdiff1_y :=  eins -  yStrich ;\n');
            fprintf(file,'\t\tsum1_y :=  eins +  yStrich ;\n');
            fprintf(file,'\t\tmul_3_a <= diff1_x;\n');
            fprintf(file,'\t\tmul_3_b <= diff1_x;\n');
            fprintf(file,'\t\tdiff1_xSquare := mul_3_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_4_a <= diff2_x;\n');
            fprintf(file,'\t\tmul_4_b <= diff2_x;\n');
            fprintf(file,'\t\tdiff2_xSquare := mul_4_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_5_a <= xStrich;\n');
            fprintf(file,'\t\tmul_5_b <= xStrich;\n');
            fprintf(file,'\t\txStrichSquare := mul_5_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_6_a <= sum1_x;\n');
            fprintf(file,'\t\tmul_6_b <= sum1_x;\n');
            fprintf(file,'\t\tsum1_xSquare := mul_6_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_11_a <= diff1_y;\n');
            fprintf(file,'\t\tmul_11_b <= diff1_y;\n');
            fprintf(file,'\t\tdiff1_ySquare := mul_11_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_12_a <= diff2_y;\n');
            fprintf(file,'\t\tmul_12_b <= diff2_y;\n');
            fprintf(file,'\t\tdiff2_ySquare := mul_12_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_13_a <= yStrich;\n');
            fprintf(file,'\t\tmul_13_b <= yStrich;\n');
            fprintf(file,'\t\tyStrichSquare := mul_13_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_14_a <= sum1_y;\n');
            fprintf(file,'\t\tmul_14_b <= sum1_y;\n');
            fprintf(file,'\t\tsum1_ySquare := mul_14_res%s;  \n',obj.printCenterPrecision());
            
            fprintf(file,'\n\t\t -- Step 2\n\n');
            fprintf(file,'\t\tmul_7_a <= diff1_x;\n');
            fprintf(file,'\t\tmul_7_b <= diff1_xSquare;\n');
            fprintf(file,'\t\tBx0 := mul_7_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_8_a <= diff2_x;\n');
            fprintf(file,'\t\tmul_8_b <= diff2_xSquare;\n');
            fprintf(file,'\t\tBx1 := mul_8_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_9_a <= xStrich;\n');
            fprintf(file,'\t\tmul_9_b <= xStrichSquare;\n');
            fprintf(file,'\t\tBx3 := mul_9_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_10_a <= sum1_x;\n');
            fprintf(file,'\t\tmul_10_b <= sum1_xSquare;\n');
            fprintf(file,'\t\tBx2 := mul_10_res%s - SHIFT_LEFT(Bx3, 2);\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_15_a <= diff1_y;\n');
            fprintf(file,'\t\tmul_15_b <= diff1_ySquare;\n');
            fprintf(file,'\t\tBy0 := mul_15_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_16_a <= diff2_y;\n');
            fprintf(file,'\t\tmul_16_b <= diff2_ySquare;\n');
            fprintf(file,'\t\tBy1 := mul_16_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_17_a <= yStrich;\n');
            fprintf(file,'\t\tmul_17_b <= yStrichSquare;\n');
            fprintf(file,'\t\tBy3 := mul_17_res%s;\n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_18_a <= sum1_y;\n');
            fprintf(file,'\t\tmul_18_b <= sum1_ySquare;\n');
            fprintf(file,'\t\tBy2 := mul_18_res%s - SHIFT_LEFT(By3, 2);\n',obj.printCenterPrecision());
            fprintf(file,'\n\t\t-- Step 3\n\n');
            fprintf(file,'\t\tmul_19_a <= Bx0; \n');
            fprintf(file,'\t\tmul_19_b <= knots_mat(positionX-1)(positionY-1); \n');
            fprintf(file,'\t\tknotsXWeightResult_1 := mul_19_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_20_a <= Bx0; \n');
            fprintf(file,'\t\tmul_20_b <= knots_mat(positionX-1)(positionY+0); \n');
            fprintf(file,'\t\tknotsXWeightResult_2 := mul_20_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_21_a <= Bx0; \n');
            fprintf(file,'\t\tmul_21_b <= knots_mat(positionX-1)(positionY+1); \n');
            fprintf(file,'\t\tknotsXWeightResult_3 := mul_21_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_22_a <= Bx0; \n');
            fprintf(file,'\t\tmul_22_b <= knots_mat(positionX-1)(positionY+2); \n');
            fprintf(file,'\t\tknotsXWeightResult_4 := mul_22_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_23_a <= Bx1; \n');
            fprintf(file,'\t\tmul_23_b <= knots_mat(positionX+0)(positionY-1); \n');
            fprintf(file,'\t\tknotsXWeightResult_5 := mul_23_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_24_a <= Bx1; \n');
            fprintf(file,'\t\tmul_24_b <= knots_mat(positionX+0)(positionY+0); \n');
            fprintf(file,'\t\tknotsXWeightResult_6 := mul_24_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_25_a <= Bx1; \n');
            fprintf(file,'\t\tmul_25_b <= knots_mat(positionX+0)(positionY+1); \n');
            fprintf(file,'\t\tknotsXWeightResult_7 := mul_25_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_26_a <= Bx1; \n');
            fprintf(file,'\t\tmul_26_b <= knots_mat(positionX+0)(positionY+2); \n');
            fprintf(file,'\t\tknotsXWeightResult_8 := mul_26_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_27_a <= Bx2; \n');
            fprintf(file,'\t\tmul_27_b <= knots_mat(positionX+1)(positionY-1); \n');
            fprintf(file,'\t\tknotsXWeightResult_9 := mul_27_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_28_a <= Bx2; \n');
            fprintf(file,'\t\tmul_28_b <= knots_mat(positionX+1)(positionY+0); \n');
            fprintf(file,'\t\tknotsXWeightResult_10 := mul_28_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_29_a <= Bx2; \n');
            fprintf(file,'\t\tmul_29_b <= knots_mat(positionX+1)(positionY+1); \n');
            fprintf(file,'\t\tknotsXWeightResult_11 := mul_29_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_30_a <= Bx2; \n');
            fprintf(file,'\t\tmul_30_b <= knots_mat(positionX+1)(positionY+2); \n');
            fprintf(file,'\t\tknotsXWeightResult_12 := mul_30_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_31_a <= Bx3; \n');
            fprintf(file,'\t\tmul_31_b <= knots_mat(positionX+2)(positionY-1); \n');
            fprintf(file,'\t\tknotsXWeightResult_13 := mul_31_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_32_a <= Bx3; \n');
            fprintf(file,'\t\tmul_32_b <= knots_mat(positionX+2)(positionY+0); \n');
            fprintf(file,'\t\tknotsXWeightResult_14 := mul_32_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_33_a <= Bx3; \n');
            fprintf(file,'\t\tmul_33_b <= knots_mat(positionX+2)(positionY+1); \n');
            fprintf(file,'\t\tknotsXWeightResult_15 := mul_33_res%s ; \n',obj.printCenterPrecision());
            fprintf(file,'\t\tmul_34_a <= Bx3; \n');
            fprintf(file,'\t\tmul_34_b <= knots_mat(positionX+2)(positionY+2); \n');
            fprintf(file,'\t\tknotsXWeightResult_16 := mul_34_res%s ; \n',obj.printCenterPrecision());
            
            fprintf(file,'\n\t\t-- Step 4 \n\n');
            
            fprintf(file,'\t\tmul_35_a <= By0; \n');
            fprintf(file,'\t\tmul_35_b <= knotsXWeightResult_1 + knotsXWeightResult_5 + knotsXWeightResult_9 + knotsXWeightResult_13; \n');
            fprintf(file,'\t\tknotsFullWeightResult_1 := mul_35_res; \n');
            fprintf(file,'\t\tmul_36_a <= By1; \n');
            fprintf(file,'\t\tmul_36_b <= knotsXWeightResult_2 + knotsXWeightResult_6 + knotsXWeightResult_10 + knotsXWeightResult_14; \n');
            fprintf(file,'\t\tknotsFullWeightResult_2 := mul_36_res; \n');
            fprintf(file,'\t\tmul_37_a <= By2; \n');
            fprintf(file,'\t\tmul_37_b <= knotsXWeightResult_3 + knotsXWeightResult_7 + knotsXWeightResult_11 + knotsXWeightResult_15; \n');
            fprintf(file,'\t\tknotsFullWeightResult_3 := mul_37_res; \n');
            fprintf(file,'\t\tmul_38_a <= By3; \n');
            fprintf(file,'\t\tmul_38_b <= knotsXWeightResult_4 + knotsXWeightResult_8 + knotsXWeightResult_12 + knotsXWeightResult_16; \n');
            fprintf(file,'\t\tknotsFullWeightResult_4 := mul_38_res; \n');
            
            fprintf(file,'\tend if; \n');
            fprintf(file,'end process; \n');
            fprintf(file,'end Behavioral; \n');
            
        end
    end
    
    methods (Access = private)        
        function obj = nextMultiplier(obj, file) 
            if(obj.currentMultiplier >= obj.usedMultipliers && obj.useClock)
                fprintf(file,'\n\t\t elsif calcStep = %d then\n', obj.currentStep);
                fprintf(file,'\t\t\t calcStep <= %d;\n\n', obj.currentStep + 1);
                obj.currentMultiplier = 1;
                obj.currentStep       = obj.currentStep + 1;
            else
                obj.currentMultiplier = obj.currentMultiplier + 1;
            end
        end
        
        
        function str = printSinglePrecision(obj)
            str = sprintf('(%u downto 0)', obj.fixedLengthResult-1);
        end
        
        function str = printDoublePrecision(obj)
            str = sprintf('(%u downto 0)', obj.fixedLengthResult*2-1);
        end
        
        function str = printCenterPrecision(obj)
            str = sprintf('(%u downto %u)', obj.fixedLengthResult+obj.fixedFractionResult-1, obj.fixedFractionResult);
        end
        
        
        function [hasFieldResult] = hasAllFields(~, file, Names)

            hasFieldResult = 1;
            fieldsInStruct = fieldnames(file);      
                
            for j=1:size(Names,2)
                hasName = 0;
                for i=1:length(fieldsInStruct)
                    if(strcmp(fieldsInStruct{i},strtrim(Names(j))) ~= 0)
                        hasName = 1;
                    end
                end
                if(hasName == 0)
                    hasFieldResult = 0
                    return;
                end
            end
            return;
        end
    end
end
